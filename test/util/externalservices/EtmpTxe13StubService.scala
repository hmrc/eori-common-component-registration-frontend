/*
 * Copyright 2025 HM Revenue & Customs
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package util.externalservices

import com.github.tomakehurst.wiremock.client.WireMock.{aResponse, equalToJson, post, stubFor, urlEqualTo}
import com.github.tomakehurst.wiremock.http.Fault

object EtmpTxe13StubService {

  private val internalServerErrorResponseBody =
    """
      |{
      |  "backend": {
      |    "summary": "HTTP 500 is returned when an unhandled status code is code is returned backend",
      |    "value": {
      |      "errorDetail": {
      |        "correlationId": "d60de98c-f499-47f5-b2d6-e80966e8d19e",
      |        "errorCode": 500,
      |        "errorMessage": "<detail as generated by service>",
      |        "source": "Back End",
      |        "sourceFaultDetail": {
      |          "detail": [
      |            "<detail as generated by service>"
      |          ]
      |        },
      |        "timestamp": "2020-09-28T14:31:41.286Z"
      |      }
      |    }
      |  }
      |}
      |""".stripMargin

  private val unprocessableEntityErrorResponseBody =
    """
      |{
      |  "errorcode135": {
      |    "summary": "Duplicate submission reference",
      |    "value": {
      |      "errorDetail": {
      |        "correlationId": "1ae81b45-41b4-4642-ae1c-db1126900001",
      |        "errorCode": "422",
      |        "errorMessage": "Duplicate submission reference",
      |        "source": "Backend",
      |        "sourceFaultDetail": {
      |          "detail": [
      |            "135 - Duplicate submission reference"
      |          ]
      |        },
      |        "timestamp": "2020-09-25T21:54:12.015Z"
      |      }
      |    }
      |  }
      |}
      |""".stripMargin

  private val malformedJsonEntityErrorResponseBody =
    """
      |{
      |  "malformedJSON": {
      |    "summary": "HTTP 400 is returned with below payload sample when EIS has received a malformed JSON message",
      |    "value": {
      |      "errorDetail": {
      |        "correlationId": "1ae81b45-41b4-4642-ae1c-db1126900001",
      |        "errorCode": "400",
      |        "errorMessage": "Invalid JSON document.",
      |        "source": "journey-txe13-service-camel",
      |        "sourceFaultDetail": {
      |          "detail": [
      |            "MDGValidationException: Invalid JSON document."
      |          ]
      |        },
      |        "timestamp": "2020-09-25T21:57:15.660Z"
      |      }
      |    }
      |  }
      |}
      |""".stripMargin

  val createdResponse: String =
    """
      |{
      |  "success": {
      |    "formBundleNumber": "930000221423",
      |    "position": "WORKLIST",
      |    "processingDate": "2023-11-28T10:15:10Z",
      |    "safeId": "XR0000100051093"
      |  }
      |}
      |""".stripMargin

  def returnInternalServerError(url: String, request: String): Unit =
    stubFor(
      post(urlEqualTo(url))
        .withRequestBody(equalToJson(request))
        .willReturn(
          aResponse()
            .withStatus(500)
            .withBody(internalServerErrorResponseBody)
        )
    )

  def returnUnprocessableEntity(url: String, request: String): Unit =
    stubFor(
      post(urlEqualTo(url))
        .withRequestBody(equalToJson(request))
        .willReturn(
          aResponse()
            .withStatus(422)
            .withBody(unprocessableEntityErrorResponseBody)
        )
    )

  def returnBadRequestEntity(url: String, request: String): Unit =
    stubFor(
      post(urlEqualTo(url))
        .withRequestBody(equalToJson(request))
        .willReturn(
          aResponse()
            .withStatus(400)
            .withBody(malformedJsonEntityErrorResponseBody)
        )
    )

  def returnCreated(url: String, request: String): Unit =
    stubFor(
      post(urlEqualTo(url))
        .withRequestBody(equalToJson(request))
        .willReturn(
          aResponse()
            .withStatus(201)
            .withBody(createdResponse)
        )
    )

  def faultWithConnectionReset(url: String, request: String): Unit =
    stubFor(
      post(urlEqualTo(url))
        .withRequestBody(equalToJson(request))
        .willReturn(
          aResponse()
            .withFault(Fault.CONNECTION_RESET_BY_PEER)
        )
    )

}
